// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HCW_FBXLIBRA_COUNTERWEIGHT_H_
#define FLATBUFFERS_GENERATED_HCW_FBXLIBRA_COUNTERWEIGHT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FbxLibra {
namespace CounterWeight {

struct Vector3;

struct Transform;
struct TransformBuilder;

struct Node;
struct NodeBuilder;

struct Hierarchy;
struct HierarchyBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(double _x, double _y, double _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 24);

struct Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6,
    VT_SCALE = 8
  };
  const FbxLibra::CounterWeight::Vector3 *position() const {
    return GetStruct<const FbxLibra::CounterWeight::Vector3 *>(VT_POSITION);
  }
  const FbxLibra::CounterWeight::Vector3 *rotation() const {
    return GetStruct<const FbxLibra::CounterWeight::Vector3 *>(VT_ROTATION);
  }
  const FbxLibra::CounterWeight::Vector3 *scale() const {
    return GetStruct<const FbxLibra::CounterWeight::Vector3 *>(VT_SCALE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<FbxLibra::CounterWeight::Vector3>(verifier, VT_POSITION, 8) &&
           VerifyField<FbxLibra::CounterWeight::Vector3>(verifier, VT_ROTATION, 8) &&
           VerifyField<FbxLibra::CounterWeight::Vector3>(verifier, VT_SCALE, 8) &&
           verifier.EndTable();
  }
};

struct TransformBuilder {
  typedef Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const FbxLibra::CounterWeight::Vector3 *position) {
    fbb_.AddStruct(Transform::VT_POSITION, position);
  }
  void add_rotation(const FbxLibra::CounterWeight::Vector3 *rotation) {
    fbb_.AddStruct(Transform::VT_ROTATION, rotation);
  }
  void add_scale(const FbxLibra::CounterWeight::Vector3 *scale) {
    fbb_.AddStruct(Transform::VT_SCALE, scale);
  }
  explicit TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transform> CreateTransform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const FbxLibra::CounterWeight::Vector3 *position = nullptr,
    const FbxLibra::CounterWeight::Vector3 *rotation = nullptr,
    const FbxLibra::CounterWeight::Vector3 *scale = nullptr) {
  TransformBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Node FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TRANSFORM = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const FbxLibra::CounterWeight::Transform *transform() const {
    return GetPointer<const FbxLibra::CounterWeight::Transform *>(VT_TRANSFORM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           verifier.EndTable();
  }
};

struct NodeBuilder {
  typedef Node Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Node::VT_NAME, name);
  }
  void add_transform(::flatbuffers::Offset<FbxLibra::CounterWeight::Transform> transform) {
    fbb_.AddOffset(Node::VT_TRANSFORM, transform);
  }
  explicit NodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Node> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Node>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Node> CreateNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<FbxLibra::CounterWeight::Transform> transform = 0) {
  NodeBuilder builder_(_fbb);
  builder_.add_transform(transform);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Node> CreateNodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<FbxLibra::CounterWeight::Transform> transform = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return FbxLibra::CounterWeight::CreateNode(
      _fbb,
      name__,
      transform);
}

struct Hierarchy FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HierarchyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FbxLibra::CounterWeight::Node>> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FbxLibra::CounterWeight::Node>> *>(VT_NODES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct HierarchyBuilder {
  typedef Hierarchy Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FbxLibra::CounterWeight::Node>>> nodes) {
    fbb_.AddOffset(Hierarchy::VT_NODES, nodes);
  }
  explicit HierarchyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Hierarchy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Hierarchy>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Hierarchy> CreateHierarchy(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FbxLibra::CounterWeight::Node>>> nodes = 0) {
  HierarchyBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Hierarchy> CreateHierarchyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FbxLibra::CounterWeight::Node>> *nodes = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVector<::flatbuffers::Offset<FbxLibra::CounterWeight::Node>>(*nodes) : 0;
  return FbxLibra::CounterWeight::CreateHierarchy(
      _fbb,
      nodes__);
}

inline const FbxLibra::CounterWeight::Hierarchy *GetHierarchy(const void *buf) {
  return ::flatbuffers::GetRoot<FbxLibra::CounterWeight::Hierarchy>(buf);
}

inline const FbxLibra::CounterWeight::Hierarchy *GetSizePrefixedHierarchy(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FbxLibra::CounterWeight::Hierarchy>(buf);
}

inline bool VerifyHierarchyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FbxLibra::CounterWeight::Hierarchy>(nullptr);
}

inline bool VerifySizePrefixedHierarchyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FbxLibra::CounterWeight::Hierarchy>(nullptr);
}

inline void FinishHierarchyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FbxLibra::CounterWeight::Hierarchy> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHierarchyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FbxLibra::CounterWeight::Hierarchy> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ICounterWeightFbxConvertable
}  // namespace FbxLibra

#endif  // FLATBUFFERS_GENERATED_HCW_FBXLIBRA_COUNTERWEIGHT_H_
