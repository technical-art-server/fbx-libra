# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CounterWeight

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Transform(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Transform()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransform(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Transform
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Transform
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from FbxLibra.CounterWeight.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Transform
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from FbxLibra.CounterWeight.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Transform
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from FbxLibra.CounterWeight.Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TransformStart(builder):
    builder.StartObject(3)

def Start(builder):
    TransformStart(builder)

def TransformAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    TransformAddPosition(builder, position)

def TransformAddRotation(builder, rotation):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)

def AddRotation(builder, rotation):
    TransformAddRotation(builder, rotation)

def TransformAddScale(builder, scale):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    TransformAddScale(builder, scale)

def TransformEnd(builder):
    return builder.EndObject()

def End(builder):
    return TransformEnd(builder)
