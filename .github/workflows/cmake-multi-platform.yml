# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: FbxLibra Build with CMake on multiple platforms

on:
  push:
    branches: [ "feature/add_ci" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}\build" >> "$GITHUB_OUTPUT"

    - name: Install FBX SDK on Windows
      id: fbxsdk
      shell: cmd
      run: |
        choco install 7zip
        mkdir -p ${{ github.workspace }}\third_party
        curl -L http://download.autodesk.com/us/fbx/2019/2019.0/fbx20190_fbxsdk_vs2015_win.exe -o fbx20190_fbxsdk_vs2015_win.exe
        7z x -o${{ github.workspace }}\third_party\fbx20190_fbxsdk_vs2015_win fbx20190_fbxsdk_vs2015_win.exe
        set FBX_SDK_PATH=${{ github.workspace }}\third_party\fbx20190_fbxsdk_vs2015_win
        echo %FBX_SDK_PATH%
        dir ${{ github.workspace }}\third_party\fbx20190_fbxsdk_vs2015_win
        echo "fbx-sdk-path=${{ github.workspace }}\third_party\fbx20190_fbxsdk_vs2015_win" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DFBX_SDK_PATH=${{ steps.fbxsdk.outputs.fbx-sdk-path }}
        -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=${{ github.workspace }}\conan_provider.cmake
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config Release
